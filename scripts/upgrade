#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers
# Load common variables for all scripts.
source _variables

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
admin=$(ynh_app_setting_get $app admin)
final_path=$(ynh_app_setting_get $app final_path)
port=$(ynh_app_setting_get $app port)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# If overwrite_setupvars doesn't exist, create it
if [ -z "$overwrite_setupvars" ]; then
	overwrite_setupvars=1
	ynh_app_setting_set $app overwrite_setupvars $overwrite_setupvars
fi

# If overwrite_ftl doesn't exist, create it
if [ -z "$overwrite_ftl" ]; then
	overwrite_ftl=1
	ynh_app_setting_set $app overwrite_ftl $overwrite_ftl
fi

# If overwrite_nginx doesn't exist, create it
if [ -z "$overwrite_nginx" ]; then
	overwrite_nginx=1
	ynh_app_setting_set $app overwrite_nginx $overwrite_nginx
fi

# If overwrite_phpfpm doesn't exist, create it
if [ -z "$overwrite_phpfpm" ]; then
	overwrite_phpfpm=1
	ynh_app_setting_set $app overwrite_phpfpm $overwrite_phpfpm
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

path_url=$(ynh_normalize_url_path $path_url)	# Vérifie et corrige la syntaxe du path.

#=================================================
# ACTIVATE MAINTENANCE MODE
#=================================================

ynh_maintenance_mode_ON

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies $app_depencencies

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

pihole_local_repo="/etc/.pihole"
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	# Update la copie du repo de pihole (nécessaire pour Gravity)
	ynh_setup_source "$pihole_local_repo"
	# Update le dashboard admin
	ynh_setup_source "$final_path" admin_dashboard
fi

#=================================================
# NGINX CONFIGURATION
#=================================================

# Overwrite the nginx configuration only if it's allowed
if [ $overwrite_nginx -eq 1 ]
then
	ynh_add_nginx_config
fi

#=================================================
# CREATE DEDICATED USER
#=================================================

ynh_system_user_create $app	# Create the dedicated user, if not exist

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE PI-HOLE SCRIPTS
#=================================================

# Update les scripts de Pi-hole
pihole_dir="/opt/pihole"
cp -a "$pihole_local_repo/gravity.sh" "$pihole_dir/"
cp -a $pihole_local_repo/advanced/Scripts/*.sh "$pihole_dir/"

# And copy this fucking COL_TABLE file...
cp -a "$pihole_local_repo/advanced/Scripts/COL_TABLE" "$pihole_dir/"

#=================================================
# Copy the Pi-hole main script
#=================================================

cp -a "$pihole_local_repo/pihole" /usr/local/bin/
cp -a "$pihole_local_repo/advanced/bash-completion/pihole" /etc/bash_completion.d/pihole

#=================================================
# CREATE SUDOER FILE
#=================================================

# Cette configuration sudoers autorise pihole à exécuter /usr/local/bin/pihole en root sans mot de passe. Pas plus.
cp "$pihole_local_repo/advanced/pihole.sudo" /etc/sudoers.d/pihole
echo "$app ALL=NOPASSWD: /usr/local/bin/pihole" >> /etc/sudoers.d/pihole
chmod 0440 /etc/sudoers.d/pihole

#=================================================
# UPDATE LOGROTATE SCRIPT FOR PI-HOLE
#=================================================

pihole_storage="/etc/pihole"
cp "$pihole_local_repo/advanced/logrotate" "$pihole_storage/logrotate"
dnsmasq_user=$(grep DNSMASQ_USER= /etc/init.d/dnsmasq | cut -d'"' -f2)
sed -i "/# su #/d;" "$pihole_storage/logrotate"

#=================================================
# UPDATE OF PIHOLE-FTL
#=================================================

ynh_system_reload --service_name=pihole-FTL --action=stop

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	# Get the source of Pi-Hole-FTL
	FTL_temp_path=$(mktemp -d)
	ynh_setup_source "$FTL_temp_path" FTL

	# Plutôt que télécharger le binaire C, on le compile nous-même.
	( cd "$FTL_temp_path"
	ynh_exec_warn_less make
	ynh_exec_warn_less make install )
	ynh_secure_remove "$FTL_temp_path"
fi

# Overwrite the pihole-FTL config file only if it's allowed
if [ $overwrite_ftl -eq 1 ]
then
	ynh_backup_if_checksum_is_different "$pihole_storage/pihole-FTL.conf"	# Créé un backup du fichier de config si il a été modifié.
	cp "../conf/pihole-FTL.conf" "$pihole_storage"
	ynh_store_file_checksum "$pihole_storage/pihole-FTL.conf"	# Enregistre la somme de contrôle du fichier de config
fi

cp -a $pihole_local_repo/advanced/pihole-FTL.service /etc/init.d/pihole-FTL
chmod +x /etc/init.d/pihole-FTL
ynh_exec_warn_less systemctl enable pihole-FTL

#=================================================
# BUILD THE VARIABLES FILE
#=================================================

setupVars="$pihole_storage/setupVars.conf"

# Overwrite the setupVars config file only if it's allowed
if [ $overwrite_setupvars -eq 1 ]
then
	ynh_backup_if_checksum_is_different "$setupVars"	# Créé un backup du fichier de config si il a été modifié.

	# Trouve l'interface réseau par défaut
	main_iface=$(ip route | grep default | awk '{print $5;}')
	echo "PIHOLE_INTERFACE=$main_iface" > $setupVars
	echo "IPV4_ADDRESS=127.0.0.1" >> $setupVars
	echo "IPV6_ADDRESS=" >> $setupVars
	echo "PIHOLE_DNS_1=" >> $setupVars
	echo "PIHOLE_DNS_2=" >> $setupVars
	echo "QUERY_LOGGING=true" >> $setupVars
	echo "INSTALL_WEB=true" >> $setupVars

	ynh_store_file_checksum "$setupVars"
fi

#=================================================
# UPDATE THE CRON JOB
#=================================================

cp $pihole_local_repo/advanced/pihole.cron /etc/cron.d/pihole
# Remove git usage for version. Which fails because we use here a release instead of master.
ynh_replace_string ".*updatechecker.*" "#&" /etc/cron.d/pihole

#=================================================
# START PIHOLE-FTL
#=================================================

ynh_system_reload --service_name=pihole-FTL --action=restart

#=================================================
# UPDATE THE CONF_REGEN HOOK
#=================================================

cp ../conf/dnsmasq_regenconf_hook /usr/share/yunohost/hooks/conf_regen/50-dnsmasq_$app

#=================================================
# RELOAD NGINX
#=================================================

ynh_system_reload --service_name=nginx

#=================================================
# DEACTIVE MAINTENANCE MODE
#=================================================

ynh_maintenance_mode_OFF
