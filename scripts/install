#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

# Load common variables for all scripts.
source _variables

#=================================================
# MANAGE FAILURE OF THE SCRIPT
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THIS ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

pihole_storage="/etc/pihole"
mkdir -p "$pihole_storage"
chown $app -R "$pihole_storage"

pihole_dir="/opt/pihole"
mkdir -p "$pihole_dir"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=2

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=is_public --value=$is_public
ynh_app_setting_set --app=$app --key=admin --value=$admin

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Check ports..." --weight=2

port=$(ynh_find_port 4711)	# Cherche un port libre.
if [ $port -gt 4720 ]
then
	ynh_die "The ports 4711 to 4720 are already in use. Pi-hole can't works on another port. Please try to free one of this ports."
fi
# Ouvre le port dans le firewall
#ynh_exec_fully_quiet yunohost firewall allow --no-upnp TCP $port
#ynh_app_setting_set $app port $port

# Désactive le port 53 en upnp
ynh_exec_fully_quiet yunohost firewall disallow Both 53 --no-reload
ynh_exec_fully_quiet yunohost firewall allow Both 53 --no-upnp

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=25

ynh_install_app_dependencies $app_depencencies

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=2

ynh_app_setting_set --app=$app --key=final_path --value=$final_path

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="/etc/.pihole"
ynh_setup_source --dest_dir="$final_path/CORE" --source_id=app
ynh_setup_source --dest_dir="$final_path/FTL" --source_id=pihole-ftl
ynh_setup_source --dest_dir="$final_path/WEB" --source_id=pihole-dashboard

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring nginx web server..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..."

# Create a system user
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring php-fpm..."

# Create a dedicated php-fpm config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE THE DIRECTORIES AND POPULATE THEM
#=================================================
ynh_script_progression --message="Preconfiguring Pi-hole..." --weight=2

# Copy scripts from Pi-hole CORE
cp -a "$pihole_local_repo/CORE/gravity.sh" "$pihole_dir/"
cp -a "$pihole_local_repo/CORE/advanced/Scripts/*.sh" "$pihole_dir/"
cp -a "$pihole_local_repo/CORE/advanced/Scripts/COL_TABLE" "$pihole_dir/"
cp -a "$pihole_local_repo/CORE/pihole" /usr/local/bin/
cp -a "$pihole_local_repo/CORE/advanced/bash-completion/pihole" /etc/bash_completion.d/pihole

#=================================================
# CREATE LOG FILES
#=================================================
ynh_script_progression --message="Create Pi-hole LOG Files..."

touch /var/log/pihole.log
chmod 644 /var/log/pihole.log
dnsmasq_user=$(grep DNSMASQ_USER= /etc/init.d/dnsmasq | cut -d'"' -f2)
chown $dnsmasq_user:root /var/log/pihole.log

#=================================================
# CREATE SUDOER FILE
#=================================================

cp "$pihole_local_repo/CORE/advanced/Templates/pihole.sudo" /etc/sudoers.d/pihole
echo "$app ALL=NOPASSWD: /usr/local/bin/pihole" >> /etc/sudoers.d/pihole
chmod 0440 /etc/sudoers.d/pihole

#=================================================
# INSTALL LOGROTATE SCRIPT FOR PI-HOLE
#=================================================

cp "$pihole_local_repo/CORE/advanced/Templates/logrotate" "$pihole_storage/logrotate"
sed -i "/# su #/d;" "$pihole_storage/logrotate"

#=================================================
# INSTALLATION OF PIHOLE-FTL
#=================================================

# Download, check integrity, uncompress and patch the source from pihole-ftl.src
install -T -m 0755 "$pihole_local_repo/FTL/pihole-FTL-linux-x86_64" /usr/bin/pihole-FTL

cp "../conf/pihole-FTL.conf" "$pihole_storage"
ynh_store_file_checksum "$pihole_storage/pihole-FTL.conf"

cp -a "$pihole_local_repo/CORE/advanced/Templates/pihole-FTL.service" "/etc/init.d/pihole-FTL"
chmod +x /etc/init.d/pihole-FTL

ynh_exec_warn_less systemctl disable dnsmasq
ynh_exec_warn_less systemctl enable pihole-FTL

#=================================================
# BUILD THE VARIABLES FILE
#=================================================

setupVars="$pihole_storage/setupVars.conf"

main_iface=$(ip route | grep default | awk '{print $5;}')
echo "BLOCKING_ENABLED=true" > $setupVars
echo "DNSMASQ_LISTENING=single" > $setupVars
echo "PIHOLE_DNS_1=8.8.8.8" > $setupVars
echo "PIHOLE_DNS_2=8.8.4.4" > $setupVars
echo "PIHOLE_DNS_3=2001:4860:4860:0:0:0:0:8888" > $setupVars
echo "PIHOLE_DNS_4=2001:4860:4860:0:0:0:0:8844" > $setupVars
echo "PIHOLE_DNS_5=1.1.1.1" > $setupVars
echo "PIHOLE_DNS_6=1.0.0.1" > $setupVars
echo "PIHOLE_DNS_7=2606:4700:4700::1111" > $setupVars
echo "PIHOLE_DNS_8=2606:4700:4700::1001" > $setupVars
echo "DNS_FQDN_REQUIRED=true" > $setupVars
echo "DNS_BOGUS_PRIV=true" > $setupVars
echo "DNSSEC=false" > $setupVars
echo "REV_SERVER=false" > $setupVars
echo "WEBUIBOXEDLAYOUT=boxed" > $setupVars
echo "WEBTHEME=default-dark" > $setupVars
echo "PIHOLE_INTERFACE=$main_iface" > $setupVars
echo "IPV4_ADDRESS=127.0.0.1" >> $setupVars
echo "IPV6_ADDRESS=" >> $setupVars
echo "QUERY_LOGGING=true" >> $setupVars
echo "INSTALL_WEB_SERVER=true" >> $setupVars
echo "INSTALL_WEB_INTERFACE=true" >> $setupVars
echo "LIGHTTPD_ENABLED=false" >> $setupVars
echo "CACHE_SIZE=10000" >> $setupVars

ynh_store_file_checksum "$setupVars"

#=================================================
# SET UP THE DNSMASQ CONFIG
#=================================================

ynh_system_reload --service_name=dnsmasq --action=stop

pihole_dnsmasq_config="/etc/dnsmasq.d/01-pihole.conf"
cp "$pihole_local_repo/CORE/advanced/01-pihole.conf" $pihole_dnsmasq_config

ynh_replace_string --match_string="@DNS1@" --replace_string="127.0.0.1#5053" --target_file=$pihole_dnsmasq_config
ynh_replace_string --match_string="@DNS2@" --replace_string="" --target_file=$pihole_dnsmasq_config
ynh_replace_string --match_string="@INT@" --replace_string="$main_iface" --target_file=$pihole_dnsmasq_config
ynh_replace_string --match_string="no-resolv" --replace_string="#no-resolv" --target_file=$pihole_dnsmasq_config
ynh_replace_string --match_string="@CACHE_SIZE@" --replace_string="10000" --target_file=$pihole_dnsmasq_config

# Google DNS-Server #
echo "server=8.8.8.8" >> $pihole_dnsmasq_config
echo "server=8.8.4.4" >> $pihole_dnsmasq_config
echo "server=2001:4860:4860:0:0:0:0:8888" >> $pihole_dnsmasq_config
echo "server=2001:4860:4860:0:0:0:0:8844" >> $pihole_dnsmasq_config

# Cloudflare DNS-Server #
echo "server=1.1.1.1" >> $pihole_dnsmasq_config
echo "server=1.0.0.1" >> $pihole_dnsmasq_config
echo "server=2606:4700:4700::1111" >> $pihole_dnsmasq_config
echo "server=2606:4700:4700::1001" >> $pihole_dnsmasq_config

# Fix a too recent option for our dnsmasq version.
#ynh_replace_string "log-queries=extra" "log-queries" $pihole_dnsmasq_config

ynh_store_file_checksum "$pihole_dnsmasq_config"

#=================================================
# CONFIGURE DNS FOR THE LOCAL DOMAINS
#=================================================

# Trouve l'ipv4 associée à l'interface trouvée
localipv4=$(ip address | grep "${main_iface}\$" | awk '{print $2;}' | cut -d/ -f1)

# Liste les domaines de yunohost
while read perdomain
do
	# Commente les résolutions du domaine sur 127.0.0.1, qui risquerait de bloquer la résolution sur le réseau local
	ynh_replace_string "^127.0.0.1.*$perdomain" "#Commented by pihole# &" /etc/hosts

	# Et ajoute une résolution sur l'ip local à la place, si elle n'existe pas déjà
	grep -q "^$localipv4.*$perdomain" /etc/hosts || \
		echo "$localipv4	$perdomain #Added by pihole#" >> /etc/hosts
done <<< "$(yunohost domain list | grep "\." | sed 's/.*: \|.*- //')"

#=================================================
# RESTART DNSMASQ
#=================================================

ynh_system_reload --service_name=dnsmasq --action=restart

#=================================================
# INSTALL THE CRON JOB
#=================================================

cp "$pihole_local_repo/CORE/advanced/Templates/pihole.cron" /etc/cron.d/pihole
# Remove git usage for version. Which fails because we use here a release instead of master.
ynh_replace_string ".*updatechecker.*" "#&" /etc/cron.d/pihole

#=================================================
# BUILD THE LISTS WITH GRAVITY
#=================================================

cp "../conf/adlists.default" "$pihole_storage/adlists.list"
ynh_exec_warn_less /opt/pihole/gravity.sh

#=================================================
# START PIHOLE-FTL
#=================================================

ynh_system_reload --service_name=pihole-FTL --action=restart

#=================================================
# SET UP THE CONF_REGEN HOOK
#=================================================

cp "../conf/dnsmasq_regenconf_hook" /usr/share/yunohost/hooks/conf_regen/50-dnsmasq_$app

#=================================================
# GENERIC FINALISATION
#=================================================
# ENABLE SERVICE IN ADMIN PANEL
#=================================================

yunohost service add pihole-FTL --log "/var/log/pihole-FTL.log"

#=================================================
# RESTRAIN THE ACCESS TO THE ADMIN ONLY
#=================================================

yunohost app addaccess --users=$admin $app

#=================================================
# SETUP SSOWAT
#=================================================

# If app is public, add url to SSOWat conf as skipped_uris
if [ $is_public -eq 1 ]; then
  ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================

ynh_system_reload --service_name=nginx

#=================================================
# INSTALL DoH = DNS-Over-HTTPS
#=================================================

#ynh_setup_source /tmp cloudflared
# Download, check integrity, uncompress and patch the source from cloudflared.src
#ynh_package_install /tmp/cloudflared-stable-linux-arm.deb
#rm /tmp/cloudflared-stable-linux-arm.deb

#useradd -s /usr/sbin/nologin -r -M cloudflared

#cp -a ../conf/cloudflared /etc/default/cloudflared

#chown cloudflared:cloudflared /etc/default/cloudflared
#chown cloudflared:cloudflared /usr/local/bin/cloudflared

#cp -a ../conf/cloudflared.service /lib/systemd/system/cloudflared.service

#systemctl enable cloudflared
#systemctl start cloudflared

# Fix DNS
#cp -a ../conf/dnsmasq.conf /etc/dnsmasq.conf

